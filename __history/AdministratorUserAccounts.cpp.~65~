//---------------------------------------------------------------------------

#include <fmx.h>
#include <FMX.TextLayout.hpp>
#pragma hdrstop

#include "School.h"
#include "Administrator.h"
#include "AdministratorHome.h"
#include "AdministratorUserAccounts.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "AdministratorUIParent"
#pragma resource "*.fmx"
TAdministratorUserAccountsForm *AdministratorUserAccountsForm;
//---------------------------------------------------------------------------
__fastcall TAdministratorUserAccountsForm::TAdministratorUserAccountsForm(TComponent* Owner)
	: TAdministratorUIParentForm(Owner)
{

}
//---------------------------------------------------------------------------
void __fastcall TAdministratorUserAccountsForm::AdjustColumnWidths()
{
    // Initialize a vector to store the maximum width for each column
    std::vector<float> maxWidths(StringGrid1->ColumnCount, 0);

    // Create a temporary TTextLayout to measure text width
    _di_ITextLayout tempTextLayout = TTextLayoutManager::DefaultTextLayout->Create();
	tempTextLayout->Font->Assign(StringGrid1->Font); // Use the same font as the TStringGrid

        // Iterate over all cells in the TStringGrid
    for (int i = 0; i < StringGrid1->RowCount; ++i)
    {
        for (int j = 0; j < StringGrid1->ColumnCount; ++j)
        {
            // Set the temporary TTextLayout's text to the cell content
            tempTextLayout->Text = StringGrid1->Cells[j][i];

            // Calculate the width of the current cell
            float cellWidth = tempTextLayout->TextWidth;

            // Update the maximum width for the current column, if needed
            if (cellWidth > maxWidths[j])
            {
                maxWidths[j] = cellWidth;
            }
        }
	}

	// Add a small padding value to the calculated maximum widths for better readability
    float padding = 10.0;

    // Adjust the width of each column based on the calculated maximum width
    for (int j = 0; j < StringGrid1->ColumnCount; ++j)
    {
        StringGrid1->Columns[j]->Width = maxWidths[j] + padding;
	}
}

//---------------------------------------------------------------------------
void __fastcall TAdministratorUserAccountsForm::PopulateGridWithAdministrators(const std::vector<std::unique_ptr<User>>& administrators)
{
	// Set the row count based on the number of administrators
	StringGrid1->RowCount = administrators.size();

	// Add headers for the columns
	StringGrid1->Columns[0]->Header = "User ID";
	StringGrid1->Columns[1]->Header = "Email";
	StringGrid1->Columns[2]->Header = "Password";
	StringGrid1->Columns[3]->Header = "First Name";
	StringGrid1->Columns[4]->Header = "Last Name";
	StringGrid1->Columns[5]->Header = "Gender";
	StringGrid1->Columns[6]->Header = "Date of Birth";
	StringGrid1->Columns[7]->Header = "Phone Number";
	StringGrid1->Columns[8]->Header = "Address";
	StringGrid1->Columns[9]->Header = "Security Question";
	StringGrid1->Columns[10]->Header = "Security Answer";
	StringGrid1->Columns[11]->Header = "Blocked?";

	// Populate StrinGrid
	for (int i=0; i < administrators.size(); i++)
	{
		User* admin = administrators[i].get();

		StringGrid1->Cells[0][i] = admin->GetUserID().c_str();
		StringGrid1->Cells[1][i] = admin->GetEmail().c_str();
		StringGrid1->Cells[2][i] = admin->GetPassword().c_str();
		StringGrid1->Cells[3][i] = admin->GetFirstName().c_str();
		StringGrid1->Cells[4][i] = admin->GetLastName().c_str();
		StringGrid1->Cells[5][i] = admin->GetGender().c_str();
		StringGrid1->Cells[6][i] = admin->GetDateOfBirth().c_str();
		StringGrid1->Cells[7][i] = admin->GetPhoneNumber().c_str();
		StringGrid1->Cells[8][i] = admin->GetAddress().c_str();
		StringGrid1->Cells[9][i] = admin->GetSecurityQuestion().c_str();
		StringGrid1->Cells[10][i] = admin->GetSecurityAnswer().c_str();
		StringGrid1->Cells[11][i] = admin->GetIsBlocked() ? "Blocked" : "Not Blocked";
	}
}

void __fastcall TAdministratorUserAccountsForm::FormCreate(TObject *Sender)
{
	PopulateGridWithAdministrators(School::GetInstance().GetAdministrators());
	AdjustColumnWidths();
}
//---------------------------------------------------------------------------

